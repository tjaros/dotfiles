#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Necessities
#+begin_src emacs-lisp
  ;; Garbage collection
  (setq gc-cons-threshold 1073741824)
#+end_src
* Package managing

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))


  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Defaults

#+begin_src emacs-lisp
  ;; No GNU argitprop
  (setq inhibit-startup-message t)
  ;; No reminders what a scratch buffer is
  (setq initial-scratch-message nil)
  ;; No double spaces after periods
  (setq sentence-end-double-space nil)
  ;; Prompts in minibuffer not in GUI
  (setq use-dialog-box nil)
  ;; Ever copied something else and forgot?
  (setq save-interprogram-paste-before-kill t)
  ;; When I say you die you die !
  (setq confirm-kill-processes nil)
  ;; Native compilation report warnings , NOPE
  (setq native-comp-async-report-warnings-errors 'silent)
  ;; If i scroll cursor stays the same position
  (setq scroll-preserve-screen-position t)
  ;; Detailed completions
  (setq completions-detailed t)
  ;; don't let the minibuffer muck up my window tiling
  (setq read-minibuffer-restore-windows t)
  ;; scope save prompts to individual projects
  (setq save-some-buffers-default-predicate 'save-some-buffers-root)
  ;; don't keep duplicate entries in kill ring
  (setq kill-do-not-save-duplicates t)




  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (pixel-scroll-mode)

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)
  (setq ring-bell-function
        (lambda ()
          (unless (memq this-command
                        '(isearch-abort
                          abort-recursive-edit
                          exit-minibuffer
                          keyboard-quit
                          previous-line
                          next-line
                          scroll-down
                          scroll-up
                          cua-scroll-down
                          cua-scroll-up))
            (ding))))
  ;; Line number
  (column-number-mode)
  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; UTF-8 is a priority
  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8-unix)

  ;; Touchpad style scrolling & line truncation
  (setq mouse-wheel-tilt-scroll t
        mouse-wheel-flip-direction t)
  (setq-default truncate-lines t)

  (setq type-break-file-name nil)
  (type-break-mode)
  ;; Compilation buffers should wrap lines
  (add-hook 'compilation-mode-hook 'visual-line-mode)

  ;; Tell me i should take break
  (setq type-break-file-name nil)
  (type-break-mode)

#+end_src
** No garbage backups and autosaves
#+begin_src emacs-lisp
 (setq make-backup-files nil)
 (setq auto-save-default nil)
 (setq create-lockfiles nil)
#+end_src
** Font config
#+begin_src emacs-lisp
  ;;Set default pitch face
  (set-face-attribute 'default nil :font "PragmataPro Mono Liga:pixelsize=16:antialias=true:autohint=true" )

  ;;;; Set the fixed pitch face
  ;;;; (set-face-attribute 'fixed-pitch nil :font "Fira Code Nerd Font:pixelsize=19")
  (set-face-attribute 'fixed-pitch nil :font "PragmataPro Mono Liga:pixelsize=16:antialias=true:autohint=true")

  ;;;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "PragmataPro Mono Liga:pixelsize=22:antialias=true:autohint=true")
  ;;(set-face-attribute 'variable-pitch nil :font "Cantarell:pixelsize=22" :weight 'regular)

#+end_src

* Keybinding configuration
** Evil
#+begin_src emacs-lisp


  ;;Evil
  ;;(use-package evil
  ;;  :init
  ;;  (setq evil-want-integration t)
  ;;  (setq evil-want-keybinding nil)
  ;;  (setq evil-want-C-u-scroll t)
  ;;  (setq evil-want-C-i-jump nil)
  ;;  :config
  ;;  (evil-mode 1)

  ;;  ;; Use visual line motions even outside of visual-line-mode buffers
  ;;  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  ;;  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;;  (evil-set-initial-state 'messages-buffer-mode 'normal)
  ;;  (evil-set-initial-state 'dashboard-mode 'normal))

  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  ;;(use-package evil-collection
  ;;  :after evil
  ;;  :config
  ;;  (evil-collection-init))
#+end_src
** xah fly keys
#+begin_src emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/lisp/xah-fly-keys/")

   (require 'xah-fly-keys)

   ;; specify a layout
   (xah-fly-keys-set-layout "dvorak")
   (xah-fly-keys 1)

   (defun tj/xfk-cmd-mode-n-quit ()
     (interactive)
     (xah-fly-command-mode-activate)
     (keyboard-quit))

   ;; Make ESC quit prompts
   (global-set-key (kbd "<escape>") 'tj/xfk-cmd-mode-n-quit)
   (global-set-key (kbd "C-g") 'keyboard-escape-quit)

   ;; Some macros may need line-move-visual turned off, but dont forget to turn it back on before end of macro
   (defun toggle-line-move-visual ()
   "Toggle behavior of up/down arrow key, by visual line vs logical line."
   (interactive)
   (if line-move-visual
       (setq line-move-visual nil)
     (setq line-move-visual t)))

#+end_src
** meow
#+begin_src emacs-lisp :tangle no
  (use-package meow)
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

  (meow-setup)
  (meow-global-mode 1)

#+end_src
** Tab Widths
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  ;;(setq-default evil-shift-width tab-width)
#+end_src
** Remove unneeded keybinds
#+begin_src emacs-lisp
  (defun tj/unbind-bad-keybindings ()
    "Remove unhelpful keybindings."
    (-map (lambda (x) (unbind-key x)) '("C-x C-f" ;; find-file-read-only
                                        "C-x C-d" ;; list-directory
                                        "C-z" ;; suspend-frame
                                        "C-x C-z" ;; again
                                        "<mouse-2>" ;; pasting with mouse-wheel click
                                        "<C-wheel-down>" ;; text scale adjust
                                        "<C-wheel-up>" ;; ditto
                                        "s-n" ;; make-frame
                                        "s-t" ;; ns-popup-font-panel
                                        "s-p" ;; ns-print-buffer
                                        "C-x C-q" ;; read-only-mode
                                        )))
  (use-package s)
  (use-package dash :config (tj/unbind-bad-keybindings))
  (use-package shut-up)
#+end_src
* Text manipulation
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C-c C-e m" . #'mc/edit-lines)
           ("C-c C-e d" . #'mc/mark-all-dwim)))

  (setq-default fill-column 128)

  (use-package expand-region
  :bind (("C-c n" . er/expand-region)))

  (bind-key* "C-c /" #'comment-dwim)
  (bind-key* "C-c 0" #'upcase-dwim)
#+end_src
** Cleanup whitespace
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
  (setq require-final-newline t)
#+end_src
* UI Configuration
** Color themes
#+begin_src emacs-lisp
  ;;(use-package doom-themes
  ;;  :ensure t
  ;;  :config
  ;;  ;; Global settings (defaults)
  ;;  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;;  ;;(load-theme 'doom-one t)
  ;;  ;; Enable flashing mode-line on errors
  ;;  (doom-themes-visual-bell-config)
  ;;  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;  (doom-themes-neotree-config)
  ;;  ;; Corrects (and improves) org-mode's native fontification.
  ;;  (doom-themes-org-config))

  ;;(load-theme 'modus-vivendi t)

  (use-package spaceway-theme
  :ensure nil
  :load-path "~/.emacs.d/lisp/spaceway/"
  :config
  (global-hl-line-mode t)
  (set-cursor-color "#cdcdcd");;dc32ff
  ;; (when my/my-system
  ;;   (set-frame-parameter (selected-frame) 'alpha '(90 90))
  ;;   (add-to-list 'default-frame-alist '(alpha 90 90)))
  (load-theme 'spaceway t))

  (global-hl-line-mode)

#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package all-the-icons)

  ;;(use-package doom-modeline
  ;;  :ensure t
  ;;  :init (doom-modeline-mode 1)
  ;;  :custom ((doom-modeline-height 15)))

  (defun tj/project-relative-file-name (include-prefix)
  "Return the project-relative filename, or the full path if INCLUDE-PREFIX is t."
  (letrec
      ((fullname (if (equal major-mode 'dired-mode) default-directory (buffer-file-name)))
       (root (project-root (project-current)))
       (relname (if fullname (file-relative-name fullname root) fullname))
       (should-strip (and root (not include-prefix))))
    (if should-strip relname fullname)))

(use-package mood-line
  :config
  (defun tj/mood-line-segment-project-advice (oldfun)
    "Advice to use project-relative file names where possible."
    (let
        ((project-relative (ignore-errors (tj/project-relative-file-name nil))))
         (if
             (and (project-current) (not org-src-mode) project-relative)
             (propertize (format "%s  " project-relative) 'face 'mood-line-buffer-name)
           (funcall oldfun))))

  (advice-add 'mood-line-segment-buffer-name :around #'tj/mood-line-segment-project-advice)
  (mood-line-mode))
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Vertico, Marginalia, Orderless ...
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode)
    (vertico-mouse-mode)
    :custom
    (vertico-count 22)
    :bind (:map vertico-map
                ("C-'"       . #'vertico-quick-exit)
                ;; Have to rebind this because C-m is translated to RET.
                ("<return>"  . #'exit-minibuffer)
                ("C-m"       . #'vertico-insert)
                ("C-c SPC"   . #'vertico-quick-exit)
                ("DEL"       . #'vertico-directory-delete-char)))
#+end_src
*** Consult
#+begin_src emacs-lisp

  (use-package consult
    :config
    (recentf-mode)
    (defun tj/yank-pop ()
      (interactive)
      (let ((point-before (point)))
        (consult-yank-pop)
        (indent-region point-before (point))))
    :bind (("C-c i"   . #'consult-imenu)
           ("C-c y"   . #'tj/yank-pop)
           ("C-c r"   . #'consult-bookmark)
           ;;("C-c `"   . #'consult-flymake)
           ("C-c h"   . #'consult-ripgrep)
           ("C-h a"   . #'consult-apropos)
           )
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    (consult-project-root-function #'deadgrep--project-root) ;; ensure ripgrep works
    )

#+end_src
*** Crlf
#+begin_src emacs-lisp
  (use-package ctrlf
    :config (ctrlf-mode))
#+end_src
*** Prescient
#+begin_src emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode))
 #+end_src
*** Savehist
#+begin_src emacs-lisp
     (use-package savehist
       :init
       (savehist-mode))
#+end_src
*** Marginalia
#+begin_src emacs-lisp
     (use-package marginalia
       :after vertico
       :ensure t
       :custom
       (marginalia-max-relative-age 0)
       (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
       :init
       (marginalia-mode))
#+end_src
*** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :custom (completion-styles '(orderless)))
#+end_src
*** All-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src
*** Keybinds
#+begin_src emacs-lisp
#+end_src

** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol]   . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command]  . helpful-command)
    ([remap describe-key]      . helpful-key))
#+end_src

** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

** Text scaling
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
#+end_src
* Org Mode
** Better Font Faces
#+begin_src emacs-lisp
(defun tj/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "PragmataPro Mono Liga:antialias=true:autohint=true" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
** Basic config
#+begin_src emacs-lisp
  (defun tj/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . tj/org-mode-setup)
    :config
    (setq org-image-actual-width nil)
    (setq org-startup-indented t)
    (setq org-ellipsis " ▾")
    (setq tj/org-latex-scale 1.75)
    (setq org-format-latex-options
          (plist-put org-format-latex-options :scale tj/org-latex-scale))
    (add-hook 'org-mode-hook (lambda () (setq indent-tabs-mode nil)))
    (tj/org-font-setup))

#+end_src
*** Nicer heading bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Center Org Buffers
#+begin_src emacs-lisp
  (defun tj/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . tj/org-mode-visual-fill))
#+end_src
** Org Agenda
#+begin_src emacs-lisp
  ;; Put timestamp on DONE tasks
  (setq org-agenda-files (list "~/org/Todos.org"))
  (setq org-log-done t)
#+end_src
** Configure Babel Languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes)
    (setq org-confirm-babel-evaluate nil)
#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun tj/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tj/org-babel-tangle-config)))
#+end_src
** Rerender images
#+begin_src emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src
** Async org babel
#+begin_src emacs-lisp
(use-package ob-async)
#+end_src
** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    )
  (setq org-roam-directory (file-truename "~/org/notes"))
  (org-roam-db-autosync-mode)
#+end_src
** LaTeX
#+begin_src emacs-lisp
(plist-put org-format-latex-options :scale 2)
#+end_src
** ox-pandoc
#+begin_src emacs-lisp
(use-package ox-pandoc)
#+end_src
* Development
** IDE
*** Performance
#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024 )) ; 1mb
#+end_src
*** lsp-bridge
#+begin_src emacs-lisp
  ;; Requirements :
  ;; emacs 28+
  ;; pip3 install epc orjson six
  ;; postframe, markdown-mode, yasnippet


  ;;git clone https://github.com/manateelazycat/lsp-bridge.git ~/.emacs.d/lsp-bridge
  (add-to-list 'load-path "~/.emacs.d/lisp/lsp-bridge/")

  (require 'posframe)
  (require 'lsp-bridge)
  (global-lsp-bridge-mode)


    ;;(define-key evil-insert-state-map (kbd "C-n") 'acm-select-next)
    ;;(define-key evil-insert-state-map (kbd "C-p") 'acm-select-prev)

    ;;(define-key evil-insert-state-map (kbd "C-,") 'acm-doc-scroll-down)
    ;;(define-key evil-insert-state-map (kbd "C-.") 'acm-doc-scroll-up)
    ;;(define-key evil-normal-state-map (kbd "C-,") 'lsp-bridge-popup-documentation-scroll-down)
    ;;(define-key evil-normal-state-map (kbd "C-.") 'lsp-bridge-popup-documentation-scroll-up)

    ;;(define-key evil-insert-state-map (kbd "C-d") 'acm-doc-toggle)


    (setq acm-enable-icon nil)
    (setq acm-candidate-match-function 'orderless-flex)
#+end_src
*** yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :after lsp-bridge
  :diminish yas-minor-mode
  :config (yas-global-mode))

(use-package yasnippet-snippets
  :after yasnippet
  :config (yasnippet-snippets-initialize))
#+end_src
** languages
*** Python
#+begin_src emacs-lisp
  (setq python-shell-interpreter "python3")
  (setq python-indent-offset 4)

  (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")

  (use-package sphinx-doc)
  (add-hook 'python-mode-hook (lambda ()
                                  (require 'sphinx-doc)
                                  (sphinx-doc-mode t)))

  (use-package pyvenv
    :demand t
    :config
    (setq pyvenv-workon "emacs")  ; Default venv
    (pyvenv-tracking-mode 1))  ; Automatically use pyvenv-workon via dir-locals


  (use-package blacken
    :after (python)
    :init
    (add-hook 'python-mode-hook #'blacken-mode))

  (use-package python-pytest)

  (use-package pyenv-mode)

  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))

  (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
#+end_src
*** C/C++
#+begin_src emacs-lisp
  (c-set-offset 'substatement-open 0)
  (c-set-offset 'innamespace 0)
  (c-set-offset 'brace-list-open 0)
  (setq c-basic-offset 4)
  (use-package cmake-mode)

  (setq lsp-clients-clangd-args
           '("-j=8"
             "--header-insertion=never"
             "--all-scopes-completion"
             "--background-index"
             "--clang-tidy"
             "--compile-commands-dir=build"
             "--cross-file-rename"
             "--suggest-missing-includes"))
#+end_src
*** R
#+begin_src emacs-lisp
  ;;git clone https://github.com/emacs-ess/ESS.git
  (add-to-list 'load-path "~/.emacs.d/lisp/ESS/lisp")
  (require 'ess-site)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    :custom
    ((projectile-completion-system 'default))
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/dev")
      (setq projectile-project-search-path '("~/dev")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Zen mode
#+begin_src emacs-lisp
  (use-package darkroom)
#+end_src
** tree-sitter
#+begin_src emacs-lisp
  (shut-up
  (use-package tree-sitter
    :config
    (add-hook 'prog-mode-hook 'tree-sitter-mode)
    (add-hook 'prog-mode-hook 'tree-sitter-hl-mode))
  (use-package tree-sitter-langs))
#+end_src
* Utilities
** Email
*** msmtp
#+begin_src emacs-lisp
  (setq sendmail-program "/usr/bin/msmtp"
        send-mail-function #'smtpmail-send-it
        ;;message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail)
#+end_src
*** mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :defer 20
    :config
    ;; Load org-mode integration
    (require 'org-mu4e)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/.mail")

    ;; Use Ivy for mu4e completions (maildir folders, etc)
    ;;(setq mu4e-completing-read-function #'ivy-completing-read)

    ;; Make sure that moving a message (like to Trash) causes the
    ;; message to get a new file name.  This helps to avoid the
    ;; dreaded "UID is N beyond highest assigned" error.
    ;; See this link for more info: https://stackoverflow.com/a/43461973
    (setq mu4e-change-filenames-when-moving t)

    ;; Set up contexts for email accounts
    (setq mu4e-contexts
          `(,(make-mu4e-context
              :name "mail.muni.cz"
              :match-func (lambda (msg) (when msg
                                          (string-prefix-p "/mail.muni.cz" (mu4e-message-field msg :maildir))))
              :vars '(
                      (user-full-name      . "Tomáš Jaroš")
                      (smtpmail-smtp-user  . "492880@mail.muni.cz")
                      (user-mail-address   . "492880@mail.muni.cz")
                      (mu4e-sent-folder    . "/mail.muni.cz/492880/sent")
                      (mu4e-drafts-folder  . "/mail.muni.cz/492880/drafts")
                      (mu4e-trash-folder   . "/mail.muni.cz/492880/trash")
                      (mu4e-refile-folder  . "/mail.muni.cz/492880/inbox")
                      (mu4e-sent-messages-behavior . sent)
                      ))
            ))

  (setq mu4e-context-policy 'pick-first)


    ;; Display options
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses 't)

    ;; Composing mail
    (setq mu4e-compose-dont-reply-to-self t)

    ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
    ;; additional non-Gmail addresses and want assign them different
    ;; behavior.)

    ;; setup some handy shortcuts
    ;; you can quickly switch to your Inbox -- press ``ji''
    ;; then, when you want archive some messages, move them to
    ;; the 'All Mail' folder by pressing ``ma''.
    (setq mu4e-maildir-shortcuts
          '(("/inbox"  . ?i)
            ("/sent"   . ?s)
            ("/trash"  . ?t)))

    ;; don't keep message buffers around
    (setq message-kill-buffer-on-exit t)

    (setq tj/mu4e-inbox-query
          "(maildir:/inbox)");;AND flag:unread")

    (defun tj/go-to-inbox ()
      (interactive)
      (mu4e-headers-search tj/mu4e-inbox-query))


    ;; Start mu4e in the background so that it syncs mail periodically
    (mu4e t))

#+end_src

*** Options
#+begin_src emacs-lisp
  (setq mm-sign-option 'guided)
  (setq mm-encrypt-option 'guided)
#+end_src
** Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src
* Misc
** Disable init warnings
#+begin_src emacs-lisp
 (setq warning-minimum-level :error)
#+end_src
** Ligatures
#+begin_src emacs-lisp
    (use-package ligature
    :config
    ;; Enable ligatures in programming modes
  (ligature-set-ligatures 't '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                       ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                       "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                       "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                       "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                       "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                       "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                       "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                       "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                       "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

  (global-ligature-mode t))
#+end_src

** Open this file
#+begin_src emacs-lisp
(defun open-config-file ()
  "Open this very file."
  (interactive)
  (find-file "~/.emacs.d/Emacs.org"))
#+end_src

** Insert current date
#+begin_src emacs-lisp
(defun tj/insert-current-date ()
  "Insert the current date (Y-m-d) at point."
  (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
#+end_src

** Check if files same on disk
#+begin_src emacs-lisp
(defun tj/check-file-modification (&optional _)
  "Clear modified bit on all unmodified buffers."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and buffer-file-name (buffer-modified-p) (not (file-remote-p buffer-file-name)) (current-buffer-matches-file-p))
        (set-buffer-modified-p nil)))))

(defun current-buffer-matches-file-p ()
  "Return t if the current buffer is identical to its associated file."
  (autoload 'diff-no-select "diff")
  (when buffer-file-name
    (diff-no-select buffer-file-name (current-buffer) nil 'noasync)
    (with-current-buffer "*Diff*"
      (and (search-forward-regexp "^Diff finished \(no differences\)\." (point-max) 'noerror) t))))

;; (advice-add 'save-some-buffers :before #'pt/check-file-modification)

;; (add-hook 'before-save-hook #'pt/check-file-modification)
;; (add-hook 'kill-buffer-hook #'pt/check-file-modification)
(advice-add 'magit-status :before #'tj/check-file-modification)
(advice-add 'save-buffers-kill-terminal :before #'tj/check-file-modification)
#+end_src
** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src
