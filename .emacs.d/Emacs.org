#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Package managing

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Basic UI configuration

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)
  ;; Line numbers
  (column-number-mode)
  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font config
#+begin_src emacs-lisp
  ;;Set default pitch face
  (set-face-attribute 'default nil :font "FiraCode Nerd Font Mono:pixelsize=14:foundry=CTDB")

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Nerd Font:pixelsize=20")
  
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell:pixelsize=22" :weight 'regular)
#+end_src

* Keybinding configuration

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
  ;; General evil setup
  (use-package general
    :init
    (general-evil-setup t)
    :config
    (general-create-definer tj/leader-key-def
                            :keymaps '(normal insert visual emacs)
                            :prefix "SPC"
                            :global-prefix "C-SPC")
    (general-create-definer tj/ctrl-c-keys
                            :prefix "C-c"))
  ;; Evil
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** Tab Widths
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default evil-shift-width tab-width)
#+end_src
* UI Configuration
** Color themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (load-theme 'doom-palenight t)

#+end_src
** Modeline
#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src
** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Vertico, Marginalia, ... 
#+begin_src emacs-lisp
      (use-package vertico
        :ensure t
        :bind (:map vertico-map
               ("C-j" . vertico-next)
               ("C-k" . vertico-previous)
               ("C-f" . vertico-exit)
               :map minibuffer-local-map
               ("M-h" . backward-kill-word))
        :custom
        (vertico-cycle t)
        :init
        (vertico-mode))

      (use-package savehist
        :init
        (savehist-mode))

      (use-package marginalia
        :after vertico
        :ensure t
        :custom
        (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
        :init
        (marginalia-mode))

      (tj/leader-key-def
        "f"  '(:ignore t  :which-key "vertico")
        "ff" '(find-file  :which-key "file")
        "fd" '(find-dired :which-key "dired"))
#+end_src

** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol]   . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command]  . helpful-command)
    ([remap describe-key]      . helpful-key))
#+end_src

** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

** Text scaling
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (tj/leader-key-def
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
* Org Mode
** Better Font Faces
#+begin_src emacs-lisp
(defun tj/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src
** Basic config
#+begin_src emacs-lisp
  (defun tj/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))
  
  (use-package org
    :hook (org-mode . tj/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (tj/org-font-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun tj/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . tj/org-mode-visual-fill))
#+end_src
*** Nicer heading bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Center Org Buffers
#+begin_src emacs-lisp
  (defun tj/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . tj/org-mode-visual-fill))
#+end_src
** Configure Babel Languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src
** Structure Templates
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun tj/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tj/org-babel-tangle-config)))
#+end_src
* Development
** IDE
*** lsp-mode

#+begin_src emacs-lisp
  (defun tj/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
                  (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
                  :commands (lsp lsp-deferred)

                  :hook (lsp-mode . tj/lsp-mode-setup)
                  :init
                  (setq lsp-keymap-prefix "C-l")
                  :config
                  (lsp-enable-which-key-integration t)
                  :bind
                  (:map evil-normal-state-map
                        ("gh" . lsp-describe-thing-at-point)
                        ("gf" . lsp-format-buffer)
                        ("gR" . lsp-rename)))

#+end_src
*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :config (setq lsp-ui-sideline-show-hover t
                lsp-ui-sideline-delay 0.5
                lsp-ui-doc-delay 5
                lsp-ui-sideline-ignore-duplicates t
                lsp-ui-doc-position 'botto
                lsp-ui-doc-alignment 'frame
                lsp-ui-doc-header nil
                lsp-ui-doc-include-signature t
                lsp-ui-doc-use-childframe t)
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil)
  :bind (:map evil-normal-state-map
              ("gd" . lsp-ui-peek-find-definitions)
              ("gr" . lsp-ui-peek-find-references)
              ("Mi" . lsp-ui-imenu)))
 #+end_src
 
** languages
*** Python
#+begin_src emacs-lisp
(setq python-shell-interpreter "python3")
(setq python-indent-offset 4)

(use-package elpy
  :hook (python-mode . lsp-deferred)
  :custom
  ;; Use to specify the path to the python executable
  (elpy-enable)
  (dap-python-debugger 'debugpy)
  :config
  (require 'dap-python)
  :bind (:map evil-normal-state-map
              ("gp" . python-pytest-dispatch)))

(setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")

(use-package pyvenv
  :demand t
  :config
  (setq pyvenv-workon "emacs")  ; Default venv
  (pyvenv-tracking-mode 1))  ; Automatically use pyvenv-workon via dir-locals

(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))  ; or lsp-deferred

(use-package blacken
  :after (python)
  :init
  (add-hook 'python-mode-hook #'blacken-mode))

(use-package python-pytest)

(use-package pyenv-mode)

(defun projectile-pyenv-mode-set ()
  "Set pyenv version matching project name."
  (let ((project (projectile-project-name)))
    (if (member project (pyenv-mode-versions))
        (pyenv-mode-set project)
      (pyenv-mode-unset))))

(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    :custom
    ((projectile-completion-system 'default))
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/dev")
      (setq projectile-project-search-path '("~/dev")))
    (setq projectile-switch-project-action #'projectile-dired))

  (tj/leader-key-def
    "p" 'projectile-command-map)
#+end_src
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (tj/leader-key-def
    "g" '(:ignore t :which-key "git")
    "gg" 'magit)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


* Utilities
** Email
*** msmtp
#+begin_src emacs-lisp
(setq sendmail-program "/usr/bin/msmtp"
      send-mail-function #'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function #'message-send-mail-with-sendmail)
#+end_src
*** mu4e
#+begin_src emacs-lisp
  (require 'mu4e)
  (setq +mu4e-backend 'mbsync)

  ;; Each path is relative to the path of the maildir you passed to mu
  (set-email-account! "mail.muni.cz"
    '((mu4e-sent-folder       . "/mail.muni.cz/492880/sent")
      (mu4e-drafts-folder     . "/mail.muni.cz/492880/drafts")
      (mu4e-trash-folder      . "/mail.muni.cz/492880/trash")
      (mu4e-refile-folder     . "/mail.muni.cz/492880/inbox")
      (smtpmail-smtp-user     . "492880k@mail.muni.cz")
      (user-mail-address      . "492880k@mail.muni.cz")   
      (mu4e-compose-signature . "\nTomáš Jaroš"))
    t)

  (setq mu4e-context-policy 'ask-if-none
        mu4e-compose-context-policy 'always-ask)
#+end_src

